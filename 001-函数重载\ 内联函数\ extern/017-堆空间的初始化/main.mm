

#include <iostream>
using namespace std;

// malloc 方式 堆空间初识化(手动初始化)
void test (){
    // 当我们使用malloc 向堆空间申请堆空间, 只是获取一段内存空间,程序并不会帮我们将这段内存初始化,里面仍有垃圾数据
    int *p = (int *)malloc(4); //分配4字节的堆空间
    // 从p地址开始的4个字节,每个字节都设置为0
    memset(p , 0, 4); //堆空间初始化 (清空数据)
    
    // 这样也可以初始化
//    size_t size = sizeof(p);
//    memset(p, 0, size);
    cout << *p << endl;
    
     
    free(p);
}


// 堆空间 单个元素 和 数组的初始化
void test2(){
    // 这种就是没有初识化的
    int *p = new int ;
    // 初始化为 0
    int *p1 = new int() ;
    // 初始化为5
    int *p2 = new int(5) ;
    
    // 初始化一个连续的空间(数组, 3个int), 未被初始化
    int *p3 = new int[3] ;
    // 初始化一个连续的空间(数组, 3个int), 初始化 每个元素初识化为0
    int *p4 = new int[3]() ;
    //初始化一个连续的空间(数组, 3个int), 数组中的元素使用{} 里的内容(当前为:0,0,0) 初始化
    int *p5 = new int[3]{} ; // 注意: {} 只能用在数组的右边,是用来初始化数组的
    //初始化一个连续的空间(数组, 3个int), 数组中的元素使用{} 里的内容(当前为:5,0,0 ) 初始化
    int *p6 = new int[3]{5} ;// 注意: {} 只能用在数组的右边,是用来初始化数组的
    
    
    cout << *p << endl;
    cout << *p1 << endl;
    cout << *p2 << endl;
    cout << p3[0] << p3[1] << p3[2]  << endl;
    cout << p4[0] << p4[1] << p4[2]  << endl;
    cout << p5[0] << p5[1] << p5[2]  << endl;
    cout << p6[0] << p6[1] << p6[2]  << endl;
   
   
    
    /** 结论:
    1. 以后凡是要在堆空间申请一段内存除了使用 new 关键字分配外, 最好在类型右边加上 (), 这样被新分配的堆空间就被初始化了
    2. 如果要在堆空间分配一个数组, 那么在类型的右边可以使用小括号() 来初始化, 也可以使用大括号{}来精细初始胡
     */
}


int main(){
//    test();
    
    test2();
    
    getchar();
    return 0;
}

